<template>
	<div>
		<button @click="startTimer(.3)">Start Timer</button>
<<<<<<< HEAD
		<button @click="testProps()">Test props</button>
=======
>>>>>>> 13fdc373c15d739ed33e8fe93564b95f81bd80b3
		<p>{{ minutes }} {{ seconds }}</p>
	</div>
</template>

<script>
// import { eventBus } from '../main';
// console.dir(eventBus);
	export default {
		name: 'timer',
		data () {
			return {
				minutes: 0,
				seconds: 0
				// now: Math
			}
		},
		props: ['generator'],
		methods: {
			startTimer: function (theMinutes=3) {
				console.log(theMinutes);
				eventBus.$emit('stopTheGenerator', this.generator);
				var endDate = Date.parse(new Date()) + (theMinutes * 60 * 1000);
<<<<<<< HEAD
				var vm = this;
				window.setInterval(() => {
					var t = endDate - (Date.parse(new Date()));
					if (t >= 0) {
						vm.seconds = Math.floor((t / 1000) % 60);
						vm.minutes = Math.floor((t / 1000 / 60) % 60);
					} else {
						console.log('we are done');
						// vm.generatorOn = false;
						this.generator = false;
						eventBus.$emit('stopTheGenerator', vm.generator);
						clearInterval(window);
					}
				},1000)

=======

				window.setInterval(() => {
					var t = endDate - (Date.parse(new Date()));
					if ( t > -1000 ) {
						// this.generatorOn = true;
						this.seconds = Math.floor((t / 1000) % 60);
						this.minutes = Math.floor((t / 1000 / 60) % 60);	
					} else {
						return;
					}

				},1000)

				// function myfunc() {
				// 	var t = endDate - (Date.parse(new Date()));
				//   	if (t > 0  ) {
				//     	this.seconds = Math.floor((t / 1000) % 60);
				// 			this.minutes = Math.floor((t / 1000 / 60) % 60);
				//    	} else {
				//     window.clearInterval(IntervalID);
				//     }
				//   }
				//   var IntervalID = window.setInterval(myfunc, 1000);

>>>>>>> 13fdc373c15d739ed33e8fe93564b95f81bd80b3
				// return this.seconds++
			},
			testProps: function () {
				this.generator = false;
				this.$emit('stopTheGenerator', this.generator);
			}
		}
	}
</script>